
// Generated test cases for half-adder implementation
// Use these arrays instead of rand() to avoid branch prediction effects



// test_selection_array
int test_selection_array[1000] = {
    1,
    1,
    2,
    1,
    2,
    3,
    1,
    4,
    2,
    1,
    3,
    4,
    1,
    3,
    4,
    2,
    4,
    1,
    1,
    3,
    4,
    2,
    3,
    2,
    4,
    2,
    3,
    3,
    3,
    4,
    2,
    3,
    2,
    1,
    4,
    1,
    4,
    3,
    1,
    1,
    2,
    2,
    2,
    2,
    4,
    1,
    4,
    2,
    2,
    1,
    3,
    2,
    3,
    1,
    4,
    2,
    3,
    4,
    1,
    1,
    2,
    1,
    3,
    3,
    4,
    3,
    4,
    1,
    3,
    1,
    3,
    3,
    3,
    1,
    2,
    1,
    1,
    2,
    1,
    2,
    2,
    3,
    4,
    4,
    2,
    4,
    2,
    2,
    4,
    2,
    2,
    4,
    1,
    1,
    1,
    2,
    4,
    3,
    4,
    1,
    4,
    3,
    3,
    4,
    2,
    4,
    4,
    2,
    2,
    1,
    3,
    2,
    3,
    2,
    4,
    4,
    1,
    1,
    4,
    4,
    4,
    2,
    2,
    1,
    2,
    3,
    1,
    3,
    1,
    3,
    2,
    4,
    3,
    4,
    4,
    2,
    4,
    1,
    2,
    4,
    4,
    3,
    4,
    4,
    4,
    2,
    1,
    1,
    3,
    1,
    4,
    4,
    2,
    1,
    2,
    2,
    3,
    2,
    4,
    1,
    2,
    1,
    4,
    2,
    3,
    1,
    4,
    3,
    2,
    4,
    2,
    1,
    2,
    3,
    3,
    4,
    3,
    2,
    2,
    1,
    4,
    3,
    4,
    4,
    2,
    2,
    4,
    1,
    3,
    4,
    2,
    3,
    4,
    1,
    2,
    2,
    4,
    2,
    3,
    4,
    4,
    4,
    3,
    2,
    3,
    3,
    4,
    3,
    3,
    4,
    3,
    3,
    3,
    4,
    4,
    3,
    3,
    2,
    3,
    1,
    2,
    1,
    1,
    4,
    2,
    2,
    3,
    3,
    1,
    2,
    2,
    3,
    2,
    4,
    3,
    4,
    1,
    3,
    2,
    4,
    3,
    4,
    2,
    2,
    4,
    2,
    2,
    2,
    3,
    4,
    3,
    1,
    1,
    2,
    4,
    1,
    4,
    4,
    4,
    3,
    2,
    4,
    2,
    3,
    1,
    4,
    1,
    2,
    4,
    3,
    3,
    3,
    2,
    3,
    2,
    1,
    3,
    2,
    4,
    3,
    4,
    1,
    3,
    4,
    1,
    2,
    2,
    2,
    2,
    2,
    4,
    4,
    4,
    3,
    1,
    1,
    1,
    4,
    4,
    3,
    3,
    3,
    1,
    1,
    4,
    2,
    2,
    3,
    2,
    3,
    4,
    3,
    1,
    4,
    4,
    3,
    3,
    4,
    4,
    1,
    4,
    3,
    1,
    2,
    1,
    2,
    1,
    1,
    4,
    3,
    2,
    2,
    3,
    2,
    1,
    2,
    1,
    2,
    4,
    4,
    1,
    4,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    1,
    4,
    1,
    3,
    2,
    1,
    2,
    3,
    1,
    1,
    3,
    2,
    1,
    4,
    1,
    1,
    2,
    3,
    3,
    3,
    4,
    1,
    2,
    1,
    2,
    4,
    3,
    3,
    2,
    4,
    4,
    2,
    2,
    3,
    3,
    4,
    3,
    1,
    3,
    1,
    2,
    2,
    4,
    1,
    1,
    4,
    4,
    4,
    1,
    2,
    1,
    4,
    2,
    1,
    2,
    2,
    3,
    3,
    3,
    1,
    4,
    1,
    4,
    3,
    3,
    3,
    2,
    2,
    4,
    2,
    2,
    4,
    3,
    4,
    4,
    4,
    4,
    2,
    3,
    2,
    2,
    1,
    1,
    3,
    2,
    3,
    2,
    4,
    4,
    4,
    4,
    1,
    2,
    1,
    3,
    4,
    3,
    2,
    2,
    1,
    3,
    4,
    2,
    2,
    4,
    2,
    4,
    3,
    4,
    1,
    4,
    4,
    3,
    1,
    2,
    2,
    3,
    4,
    1,
    2,
    1,
    4,
    1,
    4,
    3,
    2,
    4,
    4,
    3,
    2,
    3,
    4,
    4,
    3,
    1,
    2,
    1,
    3,
    1,
    1,
    1,
    4,
    3,
    4,
    2,
    3,
    4,
    2,
    1,
    1,
    3,
    2,
    4,
    4,
    1,
    2,
    4,
    1,
    3,
    4,
    1,
    3,
    1,
    4,
    3,
    2,
    4,
    4,
    2,
    1,
    2,
    2,
    2,
    4,
    1,
    1,
    3,
    1,
    2,
    4,
    2,
    4,
    2,
    4,
    4,
    4,
    2,
    3,
    2,
    3,
    4,
    3,
    4,
    2,
    2,
    4,
    4,
    4,
    2,
    4,
    2,
    2,
    3,
    3,
    4,
    4,
    4,
    1,
    3,
    1,
    3,
    2,
    1,
    2,
    4,
    4,
    1,
    1,
    3,
    4,
    4,
    2,
    2,
    3,
    2,
    1,
    1,
    4,
    3,
    4,
    4,
    4,
    3,
    1,
    3,
    4,
    2,
    3,
    1,
    4,
    1,
    4,
    3,
    1,
    4,
    2,
    2,
    3,
    1,
    3,
    3,
    1,
    1,
    2,
    4,
    3,
    2,
    1,
    2,
    3,
    1,
    1,
    4,
    3,
    3,
    3,
    3,
    4,
    3,
    3,
    1,
    4,
    4,
    2,
    3,
    3,
    4,
    2,
    2,
    4,
    3,
    4,
    4,
    4,
    3,
    4,
    3,
    3,
    3,
    4,
    3,
    4,
    4,
    1,
    4,
    4,
    1,
    4,
    2,
    1,
    3,
    4,
    2,
    2,
    1,
    4,
    2,
    2,
    3,
    4,
    1,
    3,
    2,
    3,
    1,
    1,
    4,
    1,
    2,
    2,
    4,
    1,
    1,
    1,
    4,
    2,
    1,
    4,
    2,
    1,
    2,
    2,
    1,
    4,
    2,
    1,
    1,
    2,
    1,
    4,
    2,
    2,
    1,
    4,
    2,
    4,
    2,
    4,
    4,
    1,
    2,
    3,
    2,
    3,
    4,
    4,
    1,
    4,
    1,
    4,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    2,
    1,
    3,
    3,
    2,
    3,
    2,
    3,
    1,
    2,
    2,
    3,
    2,
    1,
    4,
    2,
    4,
    1,
    3,
    2,
    4,
    4,
    2,
    1,
    1,
    3,
    3,
    3,
    1,
    2,
    4,
    2,
    2,
    1,
    3,
    3,
    2,
    2,
    3,
    4,
    2,
    3,
    1,
    4,
    3,
    2,
    1,
    3,
    4,
    3,
    4,
    3,
    3,
    4,
    3,
    4,
    4,
    3,
    2,
    4,
    4,
    3,
    1,
    3,
    1,
    1,
    1,
    2,
    1,
    4,
    4,
    2,
    2,
    3,
    1,
    1,
    1,
    3,
    1,
    1,
    4,
    3,
    1,
    2,
    4,
    3,
    2,
    1,
    2,
    3,
    3,
    3,
    4,
    3,
    1,
    2,
    3,
    1,
    3,
    4,
    3,
    3,
    1,
    4,
    4,
    1,
    1,
    3,
    2,
    1,
    3,
    3,
    1,
    1,
    4,
    4,
    4,
    2,
    2,
    4,
    4,
    3,
    4,
    3,
    3,
    1,
    2,
    4,
    1,
    2,
    3,
    1,
    1,
    1,
    3,
    2,
    2,
    4,
    2,
    3,
    3,
    2,
    1,
    3,
    3,
    4,
    2,
    4,
    1,
    3,
    2,
    4,
    2,
    2,
    2,
    3,
    2,
    2,
    1,
    3,
    2,
    4,
    4,
    1,
    4,
    4,
    4,
    4,
    3,
    4,
    4,
    3,
    2,
    1,
    2,
    4,
    2,
    4,
    4,
    1,
    2,
    4,
    2,
    3,
    2,
    2,
    3,
    4,
    3,
    4,
    1,
    3,
    4,
    3,
    2,
    3,
    4,
    1,
    2,
    3,
    3,
    1,
    3,
    4,
    4,
    2,
    4,
    3,
    1,
    3,
    3,
    4,
    4,
    3,
    2,
    3,
    3,
    1,
    2,
    4,
    4,
    1,
    4,
    3,
    4,
    1,
    4,
    2,
    2,
    3,
    1,
    3,
    3,
    2,
    2,
    2,
    1,
    4,
    3,
    3,
    1,
    2,
    1,
    2,
    3,
    2,
    4,
    4,
    1,
    4,
    4,
    1,
    2,
    2,
    3,
    1,
    2,
    2,
    3,
    4,
    3,
    1,
    1,
    4,
    4,
    4,
    2,
    2,
    3,
    1,
    4,
    1,
    2,
    4,
    3,
    3,
    4,
    1,
    1,
    1,
    4,
    3
};

// Usage:
// for (int i = 0; i < NUM_TRIALS; i++) {
//     uint64_t in1 = random_test_cases[i][0];
//     uint64_t in2 = random_test_cases[i][1];
//     uint64_t expected_sum = random_test_cases[i][2];
//     uint64_t expected_carry = random_test_cases[i][3];
//     int should_cache = test_selection_array[i];  // Instead of rand() % 4
//     // ... your test logic here
// }
